<?php

/**
 * @file
 * Module implementation file.
 */

/**
 * The default group for theme JavaScript code added to the page.
 */
define('JS_DEFERRED', 200);

/**
 * Implements hook_js_alter().
 */
function js_defer_js_alter(&$javascript) {
  // First we need to identify the libraries that are messing with the load of:
  //   - The player for the video detail page.

  // All these scripts should not load inside the preprocessed file and should
  // be deferred to load after the player is ready.
  $info = module_invoke_all('js_defer_info');

  // Scripts that will be lazy loaded.
  $deferred_files = array();
  // Scripts that will be aggregated before being lazy loaded.
  $aggregated_files = array();
  // Check if the current context needs deferring scripts.
  foreach ($info as $context => $deferred_info) {
    $deferred_scripts = empty($deferred_info['scripts']) ? array() : $deferred_info['scripts'];
    foreach ($javascript as $deferred_script_candidate => $script_definition) {
      if (in_array($deferred_script_candidate, $deferred_scripts, TRUE)) {
        // Put everything at the bottom of the queue when loading scripts.
        $javascript[$deferred_script_candidate]['group'] = JS_DEFERRED;
        // If Drupal serves the file then we add the file to the aggregation.
        if ($javascript[$deferred_script_candidate]['type'] === 'external') {
          // If the file is external we don't want to add the to the aggregation
          // pile. Instead we want to put the to the defer list.
          $deferred_files[] = $deferred_script_candidate;
        }
        else if ($javascript[$deferred_script_candidate]['type'] === 'file') {
          // Don't defer this file directly, add it to a aggragated file and
          // then defer that one.
          if (variable_get('preprocess_js', FALSE)) {
            $aggregated_files[$deferred_script_candidate] = $script_definition;
          }
          else {
            // Add the raw url to be deferred.
            $script_url = $deferred_script_candidate;
            if (!empty($javascript[$deferred_script_candidate]['version'])) {
              $js_version_string = variable_get('drupal_js_version_query_string', 'v=');
              $script_url .= '?' . $js_version_string . $javascript[$deferred_script_candidate]['version'];
            }
            $deferred_files[] = $script_url;
          }
        }
        if ($javascript[$deferred_script_candidate]['type'] !== 'inline') {
          // There is no file to be deferred when adding inline JS. Do not unset
          // them.
          unset($javascript[$deferred_script_candidate]);
        }
      }
    }
    if (variable_get('preprocess_js') && !empty($aggregated_files)) {
      // Rekey deferred files for aggregation to include alterations of 'data'
      // @see drupal_add_js()
      $rekeyed_aggregated_files = array();
      foreach ($aggregated_files as $item) {
        $rekeyed_aggregated_files[$item['data']] = $item;
      }
      // Build the aggregated file
      $uri = drupal_build_js_cache($rekeyed_aggregated_files);
      // Add the aggregated file to the end of the deferred list the end
      $deferred_files[] = file_create_url($uri);
    }
  }
  if (!empty($deferred_files)) {
    // Add the deferred files to settings.
    drupal_add_deferred_js($javascript, $context, $deferred_files, $deferred_info);
    // Add the library that will do the lazy loading.
    libraries_load('lazyload');
    // Add the script to load deferred scripts.
    drupal_add_js(drupal_get_path('module', 'js_defer') . '/js/lazy-load-js.js');
  }
}

/**
 * Helper function to defer script loading to when an queue is triggerd in js.
 *
 * @param array $javascript
 *   Global $javascript from drupal_get_js/hook_alter_js
 * @param string $queue_name
 *   The name of the queue of scripts to associate this to.
 * @param array $scripts
 *   Array of scripting information with scripts to load. Each element is either
 *   the absolute url for the external scripts or the drupal js identifier as in
 *   drupal_get_path('module', 'module-name') . '/path/to/file.js'.
 * @param array $additional_settings
 *   Additional settings to be passed to the LazyLoad js settings object.
 *
 * @todo We need to decide when to load the minified version and when the full
 * one (mabe using preprocess_js). To load one or the other we could use library
 * variants registering our libraries with hook_libraries_info() and then
 * calling libraries_load('libname', 'minified').
 */
function drupal_add_deferred_js(&$javascript, $queue_name, $scripts, $additional_settings) {
  // In case there is data under the scripts key, unset it.
  unset($additional_settings['scripts']);
  $settings = array($queue_name => array(
    'scripts' => array(),
  ) + $additional_settings);
  $ev_settings = &$settings[$queue_name]['scripts'];

  // Since JavaScript may look for arguments in the URL and act on them, some
  // third-party code might require the use of a different query string.
  $js_version_string = variable_get('drupal_js_version_query_string', 'v=');
  $default_query_string = variable_get('css_js_query_string', '0');
  foreach ($scripts as $script) {
    // Check if the URL is absolute or relative.
    $url_parts = parse_url($script);

    // Add que version string ass done in drupal_get_js.
    if (strpos($script, $js_version_string) === FALSE) {
      $script .= '?' . $default_query_string;
    }
    if (empty($url_parts['scheme']) && strpos($script, '//') !== 0) {
      // NOTE: We need to ensure these are absolute/site-relative for the
      // front-end
      $ev_settings[] = base_path() . $script;
    }
    else {
      $ev_settings[] = $script;
    }
  }

  // If we already have a js_defer setting, then append to it.
  $key = 'js_defer';
  if (!empty($javascript['settings']['data'])) {
    foreach ($javascript['settings']['data'] as $index => &$data) {
      if (isset($data[$key][$queue_name]['scripts'])) {
        $data[$key][$queue_name]['scripts'] += $ev_settings;
        return;
      }
    }
  }
  // Otherwise add the setting.
  drupal_add_js(array('js_defer' => $settings), 'setting');
}

/**
 * Implements hook_libraries_info().
 */
function js_defer_libraries_info() {
  $libraries['lazyload'] = array(
    // Only used in administrative UI of Libraries API.
    'name' => 'Lazy Load',
    'vendor url' => 'https://github.com/rgrove/lazyload',
    'download url' => 'https://github.com/rgrove/lazyload/releases/latest',
    'version' => t('Unknown'),
    'files' => array(
      // 'js' and 'css' follow the syntax of hook_library(), but file paths are
      // relative to the library path.
      'js' => array(
        'lazyload.js' => array('group' => JS_LIBRARY),
      ),
    ),
    'variants' => array(
      // All properties defined for 'minified' override top-level properties.
      'minified' => array(
        'files' => array(
          'js' => array(
            'lazyload-min.js' => array('group' => JS_LIBRARY),
          ),
        ),
      ),
    ),
  );
  return $libraries;
}
